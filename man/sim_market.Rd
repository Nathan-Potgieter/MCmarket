% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_market.R
\name{sim_market}
\alias{sim_market}
\title{sim_market}
\usage{
sim_market(
  corr,
  k = 252,
  mv_dist = "t",
  mv_df = 3,
  left_cop_weight = 0,
  left_cop_param = 4,
  marginal_dist = "norm",
  marginal_dist_model = NULL,
  ts_model = list()
)
}
\arguments{
\item{corr}{a correlation matrix that the simulated date will adhere to. Note that the
number of variables simulated is equal to the number of columns in the correlation matrix.}

\item{k}{a positive integer indicating the number of time periods to simulate. Note that
the number of periods generated is actually equal to k + 5 as these extra observations are
needed when applying time series properties to the data.}

\item{mv_dist}{a string specifying the multivariate distribution. Can be one of c("norm", "t")
referring to the multivariate normal and t distributions respectively. Default is 3.}

\item{mv_df}{degrees of freedom of the multivariate distribution, required when mv_dist = "t".}

\item{left_cop_weight}{a positive value between zero and one indicating the weight applied to
the Clayton copula when creating the multivariate distribution. Note that a value between zero
and one essentially generates a hybrid distribution between the chosen mv_dist and the Clayton
copula. Therefore, the greater the left_cop_weight the less the data will reflect the correlation
structure. Default is set to 0.}

\item{left_cop_param}{a positive value indicating the parameter of the Clayton copula. Default is 4.}

\item{marginal_dist}{a string variable specifying the univariate distribution of each variable. Can
be one of c("norm", "t", "sgt") referring to the normal, student-t and skewed-generalized-t
distributions respectively. Default is "norm".}

\item{marginal_dist_model}{list containing the relevant parameters for the chosen marginal_dist.
marginal_dist = "norm" accepts a mean and standard deviation with the respective defaults
list(mu = 0, sigma = 1). marginal_dist = "t" accepts the non-centrality and degrees of freedom arguments,
default values are list(mu = 0, df = 5). marginal_dist = "sgt" accepts the mean, sd, lambda, p
and q parameters list(mu = 0, sigma = 1, lambda, p, q). Note lambda, p and q have no defaults
and must therefore be set by the user.}

\item{ts_model}{a list containing various ARIMA + GARCH model parameters allowing one to specify
the time series properties of the simulated returns. Note that parameter combinations resulting
in non-stationary of the mean or variance will produce NAN's and that the maximum lag allowed for
any given parameter is 5. The default values are set as
list(omega = 5e-04, alpha = 0, gamma = NULL, beta = 0, mu = 0, ar = NULL, ma = NULL, delta = 2).
See the "model" parameter under fGarch::garchSpec() for more details regarding the parameters themselves.}
}
\value{
a tidy tibble containing a date, Asset and Return column.
}
\description{
This function produces a series of returns for an asset market with the
given correlation matrix. The user can adjust the markets left tail dependency as well
as the markets distribution and the univariate distributions of the returns.
}
\note{
It is suggested that the marginal distributions be set to mean zero and standard
deviation one. Those attributes are better set in the ts_model argument.
}
\examples{

\dontrun{

library(tidyverse)

### creating a correlation matrix of 50 assets to use as an input in sim_asset_market.
corr <- gen_corr(N = 20, Clusters = "none")

### simulating 500 periods of returns across 50 assets.
set.seed(12345)
market_data <-
         sim_market(corr,
                     k = 500,
                     mv_dist = "norm",
                     left_cop_weight = 0.1,
                     marginal_dist = "norm",
                     ts_model = list(mu = 0.000002,
                                     omega = 0.00005,
                                     alpha = 0.098839,
                                     beta = 0.899506,
                                     ar = 0.063666,
                                     ma = NULL,
                                     gamma = 0.12194,
                                     delta = 1.85))

 ### Visualising the market
 market_data \%>\%
 group_by(Asset) \%>\%
 mutate(cum_ret = 100*cumprod(1 + Return)) \%>\%
 ggplot() +
 geom_line(aes(x = date, y = cum_ret, color = Asset)) +
 facet_wrap(~Asset) +
 theme(legend.position = "none")

}
}
