% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_market.R
\name{sim_market}
\alias{sim_market}
\title{sim_market}
\usage{
sim_market(
  corr,
  k = 252,
  mv_dist = "t",
  mv_df = 3,
  clayton_param = 1,
  marginal_dist = "norm",
  marginal_dist_model = NULL,
  ts_model = NULL,
  progress = FALSE
)
}
\arguments{
\item{corr}{a correlation matrix specifying the correlation structure of the simulated data. The number
of variables simulated is equal to the number of columns/rows. When using mv_dist = "clayton", then simulated
returns do not adhere to this correlation matrix.}

\item{k}{a positive integer indicating the number of time periods to simulate.}

\item{mv_dist}{a string specifying the multivariate distribution. It can be one of c("norm", "t", "clayton"), these
correspond to the respective multivariate normal, t and Clayton distributions. This will effect how the
returns are cross-sectionally distributed. When using mv_dist = "clayton", assets will exhibit high left-tail dependence,
but will not adhere to the user-defined correlation matrix.}

\item{mv_df}{degrees of freedom of the multivariate t distribution (> 0, can be a non-integer).

The default is 4 and is only needed when mv_dist = "t".}

\item{clayton_param}{a value (> 0, can be a non-integer) indicating the parameter of the Clayton copula.

The default is 1 and is only needed when mv_dist = "clayton".}

\item{marginal_dist}{a string variable specifying the univariate distribution of the asset return series. This can
be one of c("norm", "t", "sgt") referring to the normal, student-t and skewed-generalized-t distributions, respectively.
Default is "norm".}

\item{marginal_dist_model}{list containing the relevant parameters for the chosen marginal_dist_ model.

marginal_dist = "norm" accepts the mean (mu) and standard deviation (sd) arguments with their respective
defaults set to list(mu = 0, sd = 1).

marginal_dist = "t" accepts the non-centrality parameter (ncp) and degrees of freedom (df) arguments,
default values are list(ncp = 0, df = 5).

marginal_dist = "sgt" accepts the mean (mu), standard deviation (sd), lambda, p and q parameters
list(mu = 0, sigma = 1, lambda, p, q). Note that lambda, p and q have no defaults and must, therefore, be set
by the user. For more information on the parameters see ?sgt::sgt.}

\item{ts_model}{a list containing various ARMA + APGARCH model parameters. These parameters specify
the time-series properties of the simulated returns. Note that parameter combinations resulting
in non-stationarity of the mean or variance will produce NAN's and that the maximum lag allowed for
any given parameter is 1.

The default is ts_model = NULL, in which case the time-series properties are not induced, however, if
ts_model = list() then the default values are list(omega = 5e-04, alpha = 0, gamma = NULL, beta = 0, mu = 0,
ar = NULL, ma = NULL, delta = 2). In order to set different parameters for each asset, simply insert a vector
of length equal to the number of assets, the 1st element of the vector will correspond to Asset_1, the 2nd
to Asset_2 ect...

For more details on the ARMA + APGARCH, see the ?sim_garch and the "model" parameter in ?fGarch::garchSpec.}

\item{progress}{a logical value indicating if sim_market should produce a progress bar when iterated over. See
examples on how to use correctly.

Due to memory concerns, when simulating many markets it is suggested that users use map() over map_dfr().
map_dfr() produces a long/tidy data set and is therefore, useful when wanting to produce a plot with ggplot2.}
}
\value{
a tidy tibble containing a date, Asset and Return column.
}
\description{
This function simulates a series of returns for an asset market with a wide range of
user-defined cross-section and time-series risk-return properties.
}
\note{
It is suggested that if the ts_model argument is used, then the marginal distributions be
left as list(mu = 0, sd = 1) for marginal_dist = "norm" or "sgt", and list(ncp = 0) for marginal_dist = "t".

If this is not done, a warning message will appear. It is better to set these attributes with the
ts_model argument, see the mu and omega parameters.
}
\examples{

\dontrun{

library(tidyverse)
library(MCmarket)

#=============================
# Simulating a single market
#=============================
### creating a correlation matrix of 50 assets to use as an input in sim_asset_market.
corr <- gen_corr(D = 20, clusters = "none")

### simulating 500 periods of returns across 50 assets.
set.seed(12345)
market_data <-
         sim_market(corr,
                     k = 500,
                     mv_dist = "norm",
                     marginal_dist = "norm",
                     ts_model = list(mu = 0.000002,
                                     omega = 0.00005,
                                     alpha = 0.09,
                                     beta = 0.8,
                                     ar = 0.06,
                                     ma = NULL,
                                     gamma = 0.001,
                                     delta = 1.85),
                     progress = FALSE)

 ### Visualising the market
 market_data \%>\%
 group_by(Asset) \%>\%
 mutate(cum_ret = 100*cumprod(1 + Return)) \%>\%
 ggplot() +
 geom_line(aes(x = date, y = cum_ret, color = Asset)) +
 facet_wrap(~Asset, scales = "free_y") +
 theme(legend.position = "none")

#==================================================
# Performing Monte Carlo's with a Progress bar
#==================================================

### For small N<500, can use map_dfr for tidy output.
N <- 50
pb <- dplyr::progress_estimated(N) # Setting length of progress bar, Must be named pb.
market <-
      map_dfr(1:N,
              ~sim_market(corr,
                          marginal_dist = "norm",
                          marginal_dist_model = list(mu = 0.02, sd = 0.5),
                          progress = TRUE),
              .id = "Universe") # adds an extra key/identification column.

### Visualizing the market
 market \%>\% group_by(Asset, Universe) \%>\%
 mutate(cum_ret = 100*cumprod(1 + Return)) \%>\%
         ggplot() +
         geom_line(aes(x = date, y = cum_ret, color = Universe)) +
        theme(legend.position = "none")

### For large N>500, should rather use map for list output.
N <- 1000
pb <- dplyr::progress_estimated(N)   # this must be named pb
market <- map(1:N,
              ~sim_market(corr, progress = TRUE))

}
}
