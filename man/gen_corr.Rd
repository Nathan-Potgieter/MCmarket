% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_corr.R
\name{gen_corr}
\alias{gen_corr}
\title{gen_corr}
\usage{
gen_corr(
  D = 50,
  clusters = c("none", "non-overlapping", "overlapping"),
  num_clusters = NULL
)
}
\arguments{
\item{D}{the number of variables. The output is a D by D correlation matrix.}

\item{clusters}{a character string specifying the type of cluster structure.
Available options are:

"none" for a correlation matrix with no clusters, but significant correlation
between constituents.

"non-overlapping" for a correlation matrix with one layer of clusters.

"overlapping" for a correlation matrix with up to four layers and a set number
of clusters per layer.}

\item{num_clusters}{If clusters = "none", then num_clusters is not used.

If clusters = "non-overlapping", then num_clusters is an integer indicating the number of clusters.

If clusters = "overlapping", then num_clusters is a vector of length less than or equal to four. The length of
num_clusters specifies the number of cluster layers and the integers within the vector specify the number of clusters
per layer. It is preferable to arrange the vector in descending order, since failing to do so can result in a
unique output, which may not contain the intended number of layers. Additionally, using combinations with repeating
numbers of clusters, for example num_clusters = C(10, 10, 5, 5)) will produce fewer layers, but unique intra-cluster
correlations (See examples).}
}
\value{
Returns a D by D correlation matrix.
}
\description{
This function allows users to easily generate a user-defined ad hoc correlation
matrix with up to four layers of clusters.
}
\examples{
\dontrun{
library(ggcorrplot)

### This generates a 50 by 50 correlation matrix with no clusters.
gen_corr(D = 50, clusters = "none) \%>\%
         ggcorrplot(title = "no clusters")

### This generates a 50 by 50 correlation matrix with 5 non-overlapping clusters.
gen_corr(D = 50, clusters = "non-overlapping) \%>\%
         ggcorrplot(title = "non-overlapping clusters")

### This generates a 60 by 60 correlation matrix consisting
### of 4 layers with 10, 5, 3 and 2 clusters respectively.
gen_corr(D = 60,
         clusters = "overlapping",
         num_clusters = c(10,5,3,2)) \%>\%
                  ggcorrplot(title = "overlapping clusters")

### Try tinkering with the num_clusters argument in unique ways to effect the
### within cluster correlation coefficients.
### Two cluster layers with low overall correlation.
gen_corr(D = 50,
         clusters = "overlapping",
         num_clusters = c(10,10,10,2)) \%>\%
                  ggcorrplot(title = "overlapping clusters") \%>\%
                  ggcorrplot(title = "overlapping clusters")

}
}
