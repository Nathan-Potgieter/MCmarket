% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_corr.R
\name{gen_corr}
\alias{gen_corr}
\title{gen_corr}
\usage{
gen_corr(
  D = 50,
  clusters = c("none", "non-overlapping", "overlapping"),
  num_clusters = NULL
)
}
\arguments{
\item{D}{The number of variables, generates an D by D correlation matrix.}

\item{clusters}{a character string specifying the type of cluster structure.
Available options are "none", for a correlation matrix with no clusters,
"non-overlapping" for a correlation matrix with one layer of clusters, and
"overlapping" for a correlation matrix with up to 4 layers and a set number
of clusters per layer.}

\item{num_clusters}{If clusters = "none" then num_clusters is not used.

If clusters = "non-overlapping" then num_clusters is an integer indicating the number of clusters.

If clusters = "overlapping" then num_clusters must be a vector of length less than or equal to 4. The length of
num_clusters specifies the number of  cluster layers and the integers within the vector specify the number of clusters
per layer. It is preferable to arranged the vector in descending order, but failing to do so can result in
unique output but may not contain the intended number of layers.}
}
\value{
this function returns a D by D correlation matrix.
}
\description{
This function allows users to easily generate ad hoc correlation
matrices with a set number of clusters and up to 4 layers.
}
\examples{
\dontrun{
library(ggcorrplot)

### This generates a 50 by 50 correlation matrix with no clusters.
gen_corr(D = 50, clusters = "none) \%>\%
         ggcorrplot(title = "no clusters")

### This generates a 50 by 50 correlation matrix with 5 non-overlapping clusters.
gen_corr(D = 50, clusters = "non-overlapping) \%>\%
         ggcorrplot(title = "non-overlapping clusters")

### This generates a 60 by 60 correlation matrix consisting
### of 4 layers with 10, 5, 3 and 2 clusters respectively.
gen_corr(D = 60,
         clusters = "overlapping",
         num_clusters = c(10,5,3,2)) \%>\%
                  ggcorrplot(title = "overlapping clusters")

### Try tinkering with the num_clusters argument in unique ways to effect the
### within cluster correlation coefficients.
### Two cluster layers with low overall correlation.
gen_corr(D = 50,
         clusters = "overlapping",
         num_clusters = c(10,10,10,2)) \%>\%
                  ggcorrplot(title = "overlapping clusters") \%>\%
                  ggcorrplot(title = "overlapping clusters")

}
}
